/**
 * @Programa: Roundabout: Aballister's Curse
 * @Proposito: Demostrar nuestras habilidades de conceptos avanzados de programación
 * @Asesor: Raymundo Cornejo García
 * @Descripcion: Este programa es un RPG de un estilo muy retro puesto que esta hecho en la consola. Se trata de un explorador
 *               de dungeons (calabozos) con batallas de turnos. Se podrán escoger 3 clases de las 5 que hay.
 * @Fecha:27/05/2019
 * @Autores:
 * Hugo Edibray Becerra Gándara
 * Juan Pablo Martinez Cantú
 * Axel Dalí Gomez Morales
 * Daniel Alberto Cota Ochoa
 * Rubén Domínguez Chávez
**/
#include <iostream> //cout, cin
#include <stdlib.h> //srand, rand
#include <windows.h> //system
#include <conio.h> //getch
#include <locale.h> //locale
#include <wchar.h> //getch
#include <iomanip> //setw
#include <string> //stoi
#include <algorithm> //sort
#include <time.h> //time
#include <assert.h> //assert
#include<thread> //thread

using namespace std;

/** Variables Globales **/
const short unsigned int Keyleft = 37; //left
const short unsigned int Keytop = 38; //up
const short unsigned int Keyright = 39; //right
const short unsigned int Keydown = 40; //down
int piso = 0; /** El piso en el que se encuentra **/
bool gameOn= true; /**Es un booleano que tiene valor verdadero mientras el juego se siga ejecutando**/
int index2, index3; /**Posicion del menú que se imprime**/
int counter1; /**Ancho del menú cada vez que se imprime**/
int textT=1;
int size=78; /**Ancho maximo del menú**/
int speed=50; /**Velocidad a la que se desppliega el menú**/
/** Variables **/
    bool firstIteration = 1; /** revisa que sea la primera iteracion y que sucedan las cosas de inicio **/
    char niebla = 177;  /** valor ASCII que representa la niebla **/
    char muroooo = 219; /** valor ASCII que representa el muro **/
    char pasillo = 255; /** valor ASCII que representa el pasillo pasable plano donde las personas pasan **/
    char enemigo = 88;  /** valor ASCII del enemigo **/
    char bosssss = 157; /** valor ASCII del boss de cada nivel **/
    char itemmmm = 42;  /** valor ASCII para los items anillos **/
    char ceroooo = '0'; /** valor ASCII para el 0 **/
    char unooooo = '1'; /** valor ASCII para el 1 **/
    char dosssss = '2'; /** valor ASCII para el 2 **/
    char tressss = '3'; /** valor ASCII para el 3 **/
    char cuatroo = '4'; /** valor ASCII para el 4 **/
    char cincooo = '5'; /** valor ASCII para el 5 **/
    char seissss = '6'; /** valor ASCII para el 6 **/
    char sieteee = '7'; /** valor ASCII para el 7 **/
    char ochoooo = '8'; /** valor ASCII para el 8 **/
    char nueveee = '9'; /** valor ASCII para el 9 **/

    /** Matriz de los 4 mapas real que esta debajo de la niebla, aqui estan todos los datos funcionales del juego **/
    char mapas[4][30] [30]={    //  0       1       2       3       4       5       6       7       8       9       10      11      12      13      14      15      16      17      18      19      20      21      22      23      24      25      26      27      28      29
             /**x**/    /** 0 **/  muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 1 **/  muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,bosssss,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 2 **/  muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 3 **/  muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 4 **/  muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 5 **/  muroooo,itemmmm,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 6 **/  muroooo,pasillo,pasillo,pasillo,pasillo,enemigo,pasillo,pasillo,pasillo,pasillo,muroooo,muroooo,muroooo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 7 **/  muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,pasillo,pasillo,pasillo,pasillo,muroooo,muroooo,muroooo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 8 **/  muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,muroooo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 9 **/  muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 10 **/ muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,itemmmm,pasillo,pasillo,enemigo,muroooo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 11 **/ muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 12 **/ muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 13 **/ muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,pasillo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 14 **/ muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 15 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 16 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 17 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 18 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 19 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 20 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 21 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 22 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 23 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 24 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 25 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 26 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 27 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 28 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 29 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                               //  0       1       2       3       4       5       6       7       8       9       10      11      12      13      14      15      16      17      18      19      20      21      22      23      24      25      26      27      28      29
             /**x**/    /** 0 **/  muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 1 **/  muroooo,bosssss,muroooo,enemigo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,enemigo,muroooo,muroooo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 2 **/  muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 3 **/  muroooo,pasillo,pasillo,pasillo,muroooo,muroooo,enemigo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 4 **/  muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 5 **/  muroooo,muroooo,muroooo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,enemigo,pasillo,pasillo,pasillo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 6 **/  muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 7 **/  muroooo,itemmmm,pasillo,pasillo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,muroooo,pasillo,pasillo,pasillo,muroooo,muroooo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 8 **/  muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 9 **/  muroooo,enemigo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,enemigo,pasillo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 10 **/ muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 11 **/ muroooo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,enemigo,pasillo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 12 **/ muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 13 **/ muroooo,pasillo,muroooo,pasillo,muroooo,enemigo,pasillo,pasillo,pasillo,pasillo,enemigo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,muroooo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 14 **/ muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 15 **/ muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,pasillo,pasillo,pasillo,pasillo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 16 **/ muroooo,pasillo,muroooo,pasillo,pasillo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 17 **/ muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,tressss,pasillo,pasillo,pasillo,pasillo,pasillo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 18 **/ muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,itemmmm,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,pasillo,pasillo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 19 **/ muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 20 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 21 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 22 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 23 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 24 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 25 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 26 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 27 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 28 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 29 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                               //  0       1       2       3       4       5       6       7       8       9       10      11      12      13      14      15      16      17      18      19      20      21      22      23      24      25      26      27      28      29
             /**x**/    /** 0 **/  muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 1 **/  muroooo,muroooo,muroooo,muroooo,pasillo,pasillo,pasillo,enemigo,muroooo,enemigo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,bosssss,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 2 **/  muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,muroooo,pasillo,pasillo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 3 **/  muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,muroooo,muroooo,muroooo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 4 **/  muroooo,enemigo,pasillo,pasillo,enemigo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,pasillo,pasillo,seissss,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 5 **/  muroooo,cuatroo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 6 **/  muroooo,pasillo,muroooo,muroooo,enemigo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,enemigo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,itemmmm,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 7 **/  muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 8 **/  muroooo,pasillo,muroooo,muroooo,enemigo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,enemigo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,enemigo,pasillo,pasillo,cincooo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 9 **/  muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 10 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 11 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 12 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 13 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 14 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 15 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 16 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 17 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 18 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 19 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 20 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 21 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 22 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 23 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 24 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 25 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 26 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 27 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 28 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                        /** 29 **/ pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,
                               //  0       1       2       3       4       5       6       7       8       9       10      11      12      13      14      15      16      17      18      19      20      21      22      23      24      25      26      27      28      29
             /**x**/    /** 0 **/  muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,
                        /** 1 **/  muroooo,enemigo,pasillo,pasillo,pasillo,enemigo,pasillo,pasillo,pasillo,pasillo,pasillo,sieteee,pasillo,pasillo,pasillo,enemigo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,muroooo,
                        /** 2 **/  muroooo,pasillo,muroooo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,
                        /** 3 **/  muroooo,pasillo,muroooo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,bosssss,muroooo,
                        /** 4 **/  muroooo,pasillo,muroooo,muroooo,muroooo,pasillo,muroooo,enemigo,pasillo,pasillo,muroooo,pasillo,pasillo,pasillo,muroooo,enemigo,muroooo,enemigo,muroooo,muroooo,enemigo,muroooo,muroooo,enemigo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,
                        /** 5 **/  muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,
                        /** 6 **/  muroooo,pasillo,muroooo,enemigo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,
                        /** 7 **/  muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,itemmmm,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,enemigo,muroooo,
                        /** 8 **/  muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,
                        /** 9 **/  muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,ochoooo,pasillo,pasillo,pasillo,pasillo,pasillo,enemigo,muroooo,muroooo,muroooo,enemigo,pasillo,pasillo,muroooo,pasillo,muroooo,
                        /** 10 **/ muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,
                        /** 11 **/ muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,enemigo,pasillo,pasillo,pasillo,pasillo,pasillo,enemigo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,
                        /** 12 **/ muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,
                        /** 13 **/ muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,
                        /** 14 **/ muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,
                        /** 15 **/ muroooo,enemigo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,
                        /** 16 **/ muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,pasillo,enemigo,muroooo,
                        /** 17 **/ muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,
                        /** 18 **/ muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,
                        /** 19 **/ muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,pasillo,pasillo,nueveee,muroooo,muroooo,muroooo,muroooo,muroooo,
                        /** 20 **/ muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,
                        /** 21 **/ muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,
                        /** 22 **/ muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,itemmmm,muroooo,
                        /** 23 **/ muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,pasillo,pasillo,enemigo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,enemigo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,muroooo,pasillo,muroooo,
                        /** 24 **/ muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,
                        /** 25 **/ muroooo,pasillo,muroooo,enemigo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,muroooo,pasillo,muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,pasillo,muroooo,
                        /** 26 **/ muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,enemigo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,muroooo,
                        /** 27 **/ muroooo,pasillo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,
                        /** 28 **/ muroooo,enemigo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,enemigo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,pasillo,ochoooo,itemmmm,muroooo,
                        /** 29 **/ muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo,muroooo};


    char mapaVisible[30][30]={niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,
                              niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,
                              niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,
                              niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,
                              niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,
                              niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,
                              niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,
                              niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,
                              niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,
                              niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,
                              niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,
                              niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,
                              niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,
                              niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,
                              niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,
                              niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,
                              niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,
                              niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,
                              niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,
                              niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,
                              niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,
                              niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,
                              niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,
                              niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,
                              niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,
                              niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,
                              niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,
                              niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,
                              niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,
                              niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla,niebla};

/** Estructura con todos los datos de un personaje **/
struct stats
{
    string nombre; /** Es un string que guarda el nombre de los personajes **/
    string seleccion = "0"; /** Es un string que se pasa a entero en la seleccion de clase **/
    int ataque = 10; /** Valor de Ataque de los personajes **/
    int mvida = 50; /** Valor maxima de puntos de vida de los personajes **/
    int vida = mvida; /** Valor de los puntos actuales de los personajes**/
    int defensa = 10; /** Valor para resistir ataques o anularlos **/
    int velocidad = 10; /** Valor para saber la secuencia de los turnos **/
    int magia = 10; /** Valor mágico que será el ataque del mago **/
    bool vivo = true; /** Valor booleano para saber si esta vivo o no **/
    bool amigo = true; /** Valor para saber si es de tu equipo o no, esto es para los ataques **/

    void (* attack) (stats*, int, int, int&,int&); /** Es un apuntador de funciones para definir los atques (se definen más adelante **/
}
Hero,Karsus,Aballister; //Estos son nuestros heroicos personajes jaja amiga a que horas sales por el pan o te pega el nobio. amiwa daate kuentha

/** Estructura del player en el mapa **/
struct{
    /** coordenadas donde inicia **/
    int x = 13; //coordenada en x
int y = 1; //coordenada en y
}
player; //El jugador con sus coordenadas

/** Prototipos de Funciones **/
void menu();
void informacion();
void display();
bool isValidInt(string numeroEnCadena);
bool isValidInt(int numero, int lim_mayor , int lim_menor);
void clear_screen();
void timerThread();
int getKey();
void Dungeons();
void room_move(int&, int&);
void plv1_map();
bool combatstats(int);
void pattacks(struct stats*,int,int,int&,int&);
void gattacks(struct stats*,int,int,int&,int&);
void rattacks(struct stats*,int,int,int&,int&);
void battacks(struct stats*,int,int,int&,int&);
void mattacks(struct stats*,int,int,int&,int&);
void eattacks(struct stats*,int,int,int&,int&);
void level_opening();
int player_sorter(stats a, stats b);
void clase(stats &Hero, stats &Aballister, stats& Karsus);
void seleccionClase(stats&Hero);
void clear_screen();
int getKey();
void cstats(stats*, int, int, int, int, int, int, int, int, int, int);
bool battle();
void rings();
void eventroom();

int main()
{
    thread t1(timerThread);
    Aballister.nombre = "Aballister";
    Karsus.nombre = "Karsus";
    menu();
    level_opening();
    Dungeons();
    gameOn=false;
    t1.join(); ///Este al final, donde termina el juego igualar gameOn= false
    return 0;
}

/** Definicion de Funciones **/

void informacion(){
    string auxiliarInf;
    cout << " Mas opciones por implementar =)" << endl;
    cout << " 1. Regresar al menu" << endl;
    cout << " 0. Salir del juego" << endl;
    bool valido=true;
    do{
        cin>>auxiliarInf;
        clear_screen();
        try{
            if(isValidInt(auxiliarInf)==true){
                int choice= stoi(auxiliarInf);
                if(isValidInt(choice, 1, 0)){
                    switch(choice){
                        case 1:
                            clear_screen();
                            menu();
                            break;
                        case 0:
                            cout<< "  Programa cerrado";
                            gameOn=false;
                            break;
                    }
                }
                else{
                    throw "  Opcion no valida\n";
                }
            }
            else{
                throw "  Opcion no valida\n";
            }
        }
        catch(const char* msg){
            cout<< msg;
            valido= false;
        }
    } while(valido!=true);
}
void menu(){
    string userChoice;
    bool Valido=false;
    while(Valido==false){
        display();
        cout<< "  Tu seleccion: ";
        cin >> userChoice;
        try{
            if(isValidInt(userChoice)==true){
                int choice= stoi(userChoice);
                if(isValidInt(choice , 3 , 1)){
                    switch(choice){
                        case 1:
                            Valido=true;
                            break;
                        case 2:
                            Valido=true;
                            clear_screen();
                            informacion();
                            break;
                        case 3:
                            Valido=true;
                            clear_screen();;
                            cout << "  Programa cerrado" << endl;
                            gameOn=false;
                            break;
                    }
                }
                else{
                    throw "  Opcion no valida\n";
                }
            } else{
                throw "  Opcion no valida\n";
            }
        }
        catch(const char* msg){
            cout<< msg;
            getch();
            Valido= false;
        }
    }
}
void display(){
    string S1= "----------------------- ROUNDABOUT: ABALLISTER'S CURSE -----------------------";
    string S2= "==============================================================================";
    string S3= " 1. Iniciar juego                                                             ";
    string S4= " 2. Informacion                                                               ";
    string S5= " 3. Salir                                                                     ";
    counter1 = size;
    for(index2 = 0; index2 <= size ; index2++){
        for(index3 = counter1; index3 < size ; index3++){
            cout << S1[index3];
        }
        cout << endl;

        for(index3 = counter1; index3 < size ; index3++){
            cout << (char)206;
        }
        cout << endl;
        cout<< "\n";

        for(index3 = counter1; index3 < size ; index3++){
            cout << S2[index3];
        }
        cout<< "\n";

        for(index3 = counter1; index3 < size ; index3++){
            cout << S3[index3];
        }
        cout<< "\n";

        for(index3 = counter1; index3 < size ; index3++){
            cout << S4[index3];
        }
        cout<< "\n";

        for(index3 = counter1; index3 < size ; index3++){
            cout << S5[index3];
        }
        cout<< "\n";
        cout<< "\n";

        counter1--;
        Sleep(speed);
        if(index2< size)
            clear_screen();
        }
}
bool isValidInt(string numeroEnCadena){
	int inicio = 0;
	int i=0;
	bool valido = true;
	bool signo = false;

	int tamanioDeCadena = numeroEnCadena.size();

	if(tamanioDeCadena == 0)
    	valido = 0;
	for(i=0; valido && i<tamanioDeCadena; i++){
    	if(!isdigit(numeroEnCadena.at(i)))
        	valido = false;
	}

	return valido;
}
bool isValidInt(int numero, int lim_mayor , int lim_menor){
    bool valido= true;
    if (numero> lim_mayor || numero< lim_menor)
        valido=false;
    return valido;
}
void clear_screen(){
  DWORD n;                         /* Number of characters written */
  DWORD size_1;                      /* number of visible characters */
  COORD coord = {0};               /* Top left screen position */
  CONSOLE_SCREEN_BUFFER_INFO csbi;

  /* Get a handle to the console */
  HANDLE h = GetStdHandle ( STD_OUTPUT_HANDLE );

  GetConsoleScreenBufferInfo ( h, &csbi );

  /* Find the number of characters to overwrite */
  size_1 = csbi.dwSize.X * csbi.dwSize.Y;

  /* Overwrite the screen buffer with whitespace */
  FillConsoleOutputCharacter ( h, TEXT ( ' ' ), size_1, coord, &n );
  GetConsoleScreenBufferInfo ( h, &csbi );
  FillConsoleOutputAttribute ( h, csbi.wAttributes, size_1, coord, &n );

  /* Reset the cursor to the top left position */
  SetConsoleCursorPosition ( h, coord );
}
void timerThread(){
    int seg=0, minutos=0, horas=0;
    while(gameOn==true)
    {
        if(seg>=60)
        {
            seg=0;
            minutos++;
            if(minutos>=60)
            {
                minutos=0;
                horas++;
            }
        }
    Sleep(1000);
    seg++;
    }
    cout<<"  La partida duro " << horas<<":"<<minutos<<":"<<seg<<endl;
}
void Dungeons(){

    /** i es la coordenada y de la impresion de pantalla, j  es la coordenada x de la impresion de pantalla
        y k es el input de la tecla que se guarda como valor entero **/
	int i=0,j=0,k=0;

	while (true)
	{
        /** Vista del jugador a traves de la niebla en su alrededor cuando empieza **/
        if(firstIteration)
        {
            firstIteration=0; /** quita la primera iteracion **/

            /** TO DO **/
            for(int i=0;i<3;i++)
            {
                for(int j=0;j<3;j++)
                {
                    mapaVisible[player.x-1+j][player.y-1+i]=mapas[piso][player.x-1+j][player.y-1+i];
                }
            }
            mapaVisible[player.x][player.y]=64; /** /@-representa al jugador en el mapa **/
        }
	    for(i=0;i<30;i++)
        {
            cout<<endl;
            for(j=0;j<30;j++)
            {
                cout<<mapaVisible[i][j];
            }
        }
		k = getKey();

		switch(k)
		{
            case Keyleft:
            {
                cout <<endl<< "you pressed : left" <<endl;
                try
                {
                    player.y--;
                    if(mapas[piso][player.x][player.y]==muroooo)
                    {
                        player.y++;
                        throw 1;
                    }
                    eventroom();
                    if(mapas[piso][player.x][player.y]==bosssss)
                        break;
                    mapas[piso][player.x][player.y+1]=pasillo;
                    mapas[piso][player.x][player.y]=pasillo;
                    mapaVisible[player.x][player.y]=64;
                }
                catch(int e)
                {
                    cout<<endl<<"No se puede salir ;v"<<endl;
                }
            }
            break;
            case Keytop:
            {
                cout << endl<<"you pressed : up" <<endl;
                try
                {
                    player.x--;
                    if(mapas[piso][player.x][player.y]==muroooo)
                    {
                        player.x++;
                        throw 1;
                    }
                    eventroom();
                    if(mapas[piso][player.x][player.y]==bosssss)
                        break;
                    mapas[piso][player.x+1][player.y]=pasillo;
                    mapas[piso][player.x][player.y]=pasillo;
                    mapaVisible[player.x][player.y]=64;
                }
                catch(int e)
                {
                    cout<<endl<<"No se puede salir ;v"<<endl;
                }
            }
            break;
            case Keyright:
            {
                cout << endl<<"you pressed : right" <<endl;
                try
                {
                    player.y++;
                    if(mapas[piso][player.x][player.y]==muroooo)
                    {
                        player.y--;
                        throw 1;
                    }
                    eventroom();
                    if(mapas[piso][player.x][player.y]==bosssss)
                        break;
                    mapas[piso][player.x][player.y-1]=pasillo;
                    mapas[piso][player.x][player.y]=pasillo;
                    mapaVisible[player.x][player.y]=64;

                }
                catch(int e)
                {
                    cout<<endl<<"No se puede salir ;v"<<endl;
                }
            }
            break;
            case Keydown:
            {
                cout <<endl<< "you pressed : down" <<endl;
                try
                {
                    player.x++;
                    if(mapas[piso][player.x][player.y]==muroooo)
                    {
                        player.x--;
                        throw 1;
                    }
                    eventroom();
                    if(mapas[piso][player.x][player.y]==bosssss)
                        break;
                    mapas[piso][player.x-1][player.y]=pasillo;
                    mapas[piso][player.x][player.y]=pasillo;
                    mapaVisible[player.x][player.y]=64;
                }
                catch(int e)
                {
                    cout<<endl<<"No se puede salir ;v"<<endl;
                }
            }
            break;
            default:
                {
                    cout<<endl<<"Tecla No Valida"<<endl;
                }
        };
        clear_screen();
    }
	system("pause");
}
int getKey(){
    while (true)
    {
        for (int i = 8; i <= 256; i++)
        {
            if (GetAsyncKeyState(i) & 0x7FFF)
            {
                return i;
            }
        }
    }
}
void cstats(stats* members, int enemies, int t1, int t2, int t3, int t4, int t5, int b1, int b2, int b3, int b4){
    members[0].nombre = Hero.nombre;
    members[0].ataque = Hero.ataque;
    members[0].defensa = Hero.defensa;
    members[0].magia = Hero.magia;
    members[0].mvida = Hero.mvida;
    members[0].velocidad = Hero.velocidad;
    if (Hero.vivo)
        members[0].vida = Hero.mvida;
    else
        members[0].vida = 0;
    members[0].vivo = Hero.vivo;
    members[0].attack = Hero.attack;

    members[1].nombre = Aballister.nombre;
    members[1].ataque = Aballister.ataque;
    members[1].defensa = Aballister.defensa;
    members[1].magia = Aballister.magia;
    members[1].mvida = Aballister.mvida;
    members[1].velocidad = Aballister.velocidad;
    if (Aballister.vivo)
        members[1].vida = Aballister.mvida;
    else
        members[1].vida = 0;
    members[1].vida = Aballister.vida;
    members[1].vivo = Aballister.vivo;
    members[1].attack = Aballister.attack;

    members[2].nombre = Karsus.nombre;
    members[2].ataque = Karsus.ataque;
    members[2].defensa = Karsus.defensa;
    members[2].magia = Karsus.magia;
    members[2].mvida = Karsus.mvida;
    members[2].velocidad = Karsus.velocidad;
    if (Karsus.vivo)
        members[2].vida = Karsus.mvida;
    else
        members[2].vida = 0;
    members[2].vida = Karsus.vida;
    members[2].vivo = Karsus.vivo;
    members[2].attack = Karsus.attack;

    for (int i = 3; i < enemies + 3; i++)
    {
        if (t1 >= 1)
        {
            members[i].nombre = "Gnomo";
            members[i].ataque = 10;
            members[i].defensa = 5;
            members[i].magia = 0;
            members[i].mvida = 20;
            members[i].velocidad = 31;
            members[i].vida = members[i].mvida;
            members[i].vivo = true;
            members[i].attack = eattacks;
            members[i].amigo = false;
            t1--;
        }
        else if (t2 >= 1)
        {
            members[i].nombre = "Elfo";
            members[i].ataque = 20;
            members[i].defensa = 5;
            members[i].magia = 0;
            members[i].mvida = 30;
            members[i].velocidad = 45;
            members[i].vida = members[i].mvida;
            members[i].vivo = true;
            members[i].attack = eattacks;
            members[i].amigo = false;
            t2--;
        }
        else if (t3 >= 1)
        {
            members[i].nombre = "Troll";
            members[i].ataque = 25;
            members[i].defensa = 10;
            members[i].magia = 0;
            members[i].mvida = 60;
            members[i].velocidad = 25;
            members[i].vida = members[i].mvida;
            members[i].vivo = true;
            members[i].attack = eattacks;
            members[i].amigo = false;
            t3--;
        }
        else if (t4 >= 1)
        {
            members[i].nombre = "Ciclope";
            members[i].ataque = 30;
            members[i].defensa = 7;
            members[i].magia = 0;
            members[i].mvida = 70;
            members[i].velocidad = 20;
            members[i].vida = members[i].mvida;
            members[i].vivo = true;
            members[i].attack = eattacks;
            members[i].amigo = false;
            t4--;
        }
        else if (t5 >= 1)
        {
            members[i].nombre = "Ogro de dos cabezas";
            members[i].ataque = 30;
            members[i].defensa = 10;
            members[i].magia = 0;
            members[i].mvida = 75;
            members[i].velocidad = 35;
            members[i].vida = members[i].mvida;
            members[i].vivo = true;
            members[i].attack = eattacks;
            members[i].amigo = false;
            t5--;
        }
        else if (b1 >= 1)
        {
            members[i].nombre = "Pengolodh";
            members[i].ataque = 30;
            members[i].defensa = 10;
            members[i].magia = 0;
            members[i].mvida = 80;
            members[i].velocidad = 10;
            members[i].vida = members[i].mvida;
            members[i].vivo = true;
            members[i].attack = eattacks;
            members[i].amigo = false;
            b1--;
        }
        else if (b2 >= 1)
        {
            members[i].nombre = "Norchuck";
            members[i].ataque = 30;
            members[i].defensa = 10;
            members[i].magia = 0;
            members[i].mvida = 75;
            members[i].velocidad = 25;
            members[i].vida = members[i].mvida;
            members[i].vivo = true;
            members[i].attack = eattacks;
            members[i].amigo = false;
            b2--;
        }
        else if (b3 >= 1)
        {
            members[i].nombre = "Astaroth";
            members[i].ataque = 30;
            members[i].defensa = 10;
            members[i].magia = 8;
            members[i].mvida = 40;
            members[i].velocidad = 50;
            members[i].vida = members[i].mvida;
            members[i].vivo = true;
            members[i].attack = eattacks;
            members[i].amigo = false;
            b3--;
        }
        else if (b4 >= 1)
        {
            members[i].nombre = "Aballister Oscuro";
            members[i].ataque = 40;
            members[i].defensa = 10;
            members[i].magia = 0;
            members[i].mvida = 100;
            members[i].velocidad = 40;
            members[i].vida = members[i].mvida;
            members[i].vivo = true;
            members[i].attack = eattacks;
            members[i].amigo = false;
            b4--;
        }
    }
}
bool battle(){
    int yeet, members, heros = 0, width = 30, enemies = 0, type1 = 0, type2 = 0, type3 = 0, type4 = 0, type5 = 0, boss1 = 0, boss2 = 0, boss3 = 0, boss4 = 0;
    bool inbtl = true;
    srand(time(NULL));
    enemies = (rand() % 3 + 2);
    members = enemies + 3;
    yeet = enemies;
    stats member_b[members];
    switch (piso)
    {
        case 0:
            type2++;
            yeet--;
            for (int i = 0; i < yeet; i++)
                type1++;
            break;
        case 1:
            type3++;
            yeet--;
            for (int i = 0; i < yeet; i++)
                type1++;
            break;
        case 2:
            type4++;
            yeet--;
            for (int i = 0; i < yeet; i++)
                type1++;
            break;
        case 3:
            type5++;
            yeet--;
            for (int i = 0; i < yeet; i++)
                type2++;
            break;
    }
    cstats(member_b, enemies, type1, type2, type3, type4, type5, boss1, boss2, boss3, boss4);
    if (Hero.vivo)
        heros++;
    if (Aballister.vivo)
        heros++;
    if (Karsus.vivo)
        heros++;
    sort(member_b, member_b + 6, player_sorter);
    for (int i = 0; i < members; i++)
    {
        cout << member_b[i].nombre << setw(width - member_b[i].nombre.size())
        << "Vida: " << member_b[i].vida << "/" << member_b[i].mvida << endl;
    }
    getch();
    while (inbtl)
    {
        for (int i = (members - 1); i >= 0; --i)
        {
            if (heros == 0 || enemies == 0)
            {
                inbtl = false;
                i = 0;
                continue;
            }
            member_b[i].attack(member_b, members, i, enemies, heros);
        }

    }
    if (heros > 0 || enemies == 0)
        return true;
    else
        return false;

}
void rings(){
    int item = 0, whomst = 0;
    srand(time(NULL));
    item = (rand() % 3 + 1);
    whomst = (rand() % 5 + 1);
    cout << "\n Te has encontrado un anillo magico";
    switch (item)
    {
        case 1:
            switch (whomst)
            {
                case 1:
                    Hero.ataque += 3;
                    cout << "\n" << Hero.nombre << " att+3";
                    break;
                case 2:
                    Aballister.ataque += 3;
                    cout << "\n" << Aballister.nombre << " att+3";
                    break;
                case 3:
                    Karsus.ataque += 3;
                    cout << "\n" << Karsus.nombre << " att+3";
                    break;
            }
            break;
        case 2:
            switch (whomst)
            {
                case 1:
                    Hero.mvida += 3;
                    cout << "\n" << Hero.nombre << " vida+3";
                    break;
                case 2:
                    Aballister.mvida += 3;
                    cout << "\n" << Aballister.nombre << " vida+3";
                    break;
                case 3:
                    Karsus.mvida += 3;
                    cout << "\n" << Karsus.nombre << " vida+3";
                    break;
            }
            break;
        case 3:
            switch (whomst)
            {
                case 1:
                    Hero.defensa += 3;
                    cout << "\n" << Hero.nombre << " def+3";
                    break;
                case 2:
                    Aballister.defensa += 3;
                    cout << "\n" << Aballister.nombre << " def+3";
                    break;
                case 3:
                    Karsus.defensa += 3;
                    cout << "\n" << Karsus.nombre << " def+3";
                    break;
            }
            break;
        case 4:
            switch (whomst)
            {
                case 1:
                    Hero.magia += 3;
                    cout << "\n" << Hero.nombre << " mg+3";
                    break;
                case 2:
                    Aballister.magia += 3;
                    cout << "\n" << Aballister.nombre << " mg+3";
                    break;
                case 3:
                    Karsus.magia += 3;
                    cout << "\n" << Karsus.nombre << " mg+3";
                    break;
            }
            break;
        case 5:
            switch (whomst)
            {
                case 1:
                    Hero.velocidad += 3;
                    cout << "\n" << Hero.nombre << " vel+3";
                    break;
                case 2:
                    Aballister.velocidad += 3;
                    cout << "\n" << Aballister.nombre << " vel+3";
                    break;
                case 3:
                    Karsus.velocidad += 3;
                    cout << "\n" << Karsus.nombre << " vel+3";
                    break;
            }
            break;
    }
    Sleep(2000);
}
void pattacks(stats* member_b, int mem_num, int turn, int& enemies, int& heros){
    clear_screen();
    if (member_b[turn].vivo)
    {
        cout << "\n Turno de " << member_b[turn].nombre;
        string ops;
        string target;
        int op, op2, width = 30;
        bool op_inc = true;
        cout << "\n--------------Ataques----------------\n"
            << 1 << "      	La Cruz" << endl
            << 2 << "     	\"Holy Water\"" << endl
            << 3 << "      	Oracion" << endl;
        while (op_inc)
        {
            try
            {
                cin >> ops;
                if (!isValidInt(ops))
                    throw "Ingrese opcion valida";
                op = stoi(ops);
                if (op < 1 || op > 3)
                    throw 1;
                op_inc = false;
            }
            catch (const char* msg){
                cout << msg;
            }

            catch (const int nub){
                cout << "No sabes elegir?\n";
            }
        }
        clear_screen();
        cout << "\n Turno de " << member_b[turn].nombre;
        cout << "\n---------------Seleccion---------------\n";
        for (int i = 0; i < mem_num; i++)
        {
            cout << i + 1 << ":" << member_b[i].nombre << setw(width - member_b[i].nombre.size())
            << "Vida: " << member_b[i].vida << "/" << member_b[i].mvida << endl;
        }
        op_inc = true;
        while (op_inc)
        {
            try
            {
                cin >> target;
                if (!isValidInt(target))
                    throw "Ingrese opcion valida";
                op2 = stoi(target);
                op2--;
                if (op2 < 0 || op2 > mem_num - 1)
                    throw 1;
                else if ((op2) == turn && op == 1)
                    throw false;
                else if (member_b[op2].vivo == false)
                    throw 'D';
                op_inc = false;
            }
            catch (const char* msg){
                cout << msg;
            }
            catch (const int nub){
                cout << "opciones son: ";
                for (int i = 1; i <= mem_num; i++)
                    cout << i << " ";
            }
            catch (const bool nub){
                cout << "No te puedes atacar a ti mismo\n";
            }
            catch (const char deadmsg){
                cout << "Ese personaje esta muerto";
            }
        }
        switch (op)
        {
            case 1:
                cout << "\n" << member_b[turn].nombre << " ataco a " << member_b[op2].nombre
                    << " Hp-" << member_b[turn].ataque;
                if (member_b[turn].ataque > member_b[op2].defensa)
                    member_b[op2].vida -= member_b[turn].ataque - member_b[op2].defensa;
                break;
            case 2:
                cout << "\n" << member_b[turn].nombre << " sano a " << member_b[op2].nombre
                    << "Hp+";
                member_b[op2].vida += (member_b[turn].magia) * 2;
                if (member_b[op2].vida > member_b[op2].mvida)
                    member_b[op2].vida = member_b[op2].mvida;
                break;
            case 3:
                cout << "\n" << member_b[turn].nombre << " le brindouna oracion a " << member_b[op2].nombre
                    << " +Def +MaxV";
                member_b[op2].mvida += (member_b[turn].magia) / 2;
                member_b[op2].defensa += (member_b[turn].magia) / 2;
                break;
        }
        if (member_b[op2].vida <= 0)
        {
            member_b[op2].vivo = false;
            member_b[op2].vida = 0;
            cout << "\n" << member_b[op2].nombre << ": muerto";
            if (member_b[op2].amigo == false)
                enemies--;
            else
                heros--;
        }
        getch();
    }
}
void rattacks(stats* member_b, int mem_num, int turn, int&enemies,int&heros){
    clear_screen();
    if (member_b[turn].vivo)
    {
        cout << "\n Turno de " << member_b[turn].nombre;
        string ops;
        string target;
        int op, op2, width = 30, multi = 1;
        bool op_inc = true;
        cout<< "\n--------------Ataques----------------\n"
            << 1 << "      	Ataque por la espalda" << endl
            << 2 << "      	Cuchillazo" << endl
            << 3 << "      	Perforazion" << endl;
        while (op_inc)
        {
            try
            {
                cin >> ops;
                if (!isValidInt(ops))
                    throw "Ingrese opcion valida";
                op = stoi(ops);
                if (op < 1 || op > 3)
                    throw 1;
                op_inc = false;
            }
            catch (const char* msg){
                cout << msg;
            }

            catch (const int nub){
                cout << "No sabes elegir?\n";
            }
        }
        clear_screen();
        cout << "\n Turno de " << member_b[turn].nombre;
        cout << "\n---------------Seleccion---------------\n";
        for (int i = 0; i < mem_num; i++)
        {
            cout<< i + 1 << ":" << member_b[i].nombre << setw(width - member_b[i].nombre.size())
                << "Vida: " << member_b[i].vida << "/" << member_b[i].mvida << endl;
        }
        op_inc = true;
        while (op_inc)
        {
            try
            {
                cin >> target;
                if (!isValidInt(target))
                    throw "Ingrese opcion valida";
                op2 = stoi(target);
                op2--;
                if (op2 < 0 || op2 > mem_num - 1)
                    throw 1;
                else if (op2 == turn)
                    throw false;
                else if (member_b[op2].vivo == false)
                    throw 'D';
                op_inc = false;
            }
            catch (const char* msg){
                cout << msg;
            }

            catch (const int nub){
                cout << "opciones son: ";
                for (int i = 1; i <= mem_num; i++)
                    cout << i << " ";
                }

            catch (const bool nub){
                cout << "No te puedes atacar a ti mismo\n";
            }

            catch (const char deadmsg){
                cout << "Ese personaje esta muerto";
            }
        }
        switch (op)
        {
            case 1:
                srand(time(NULL));
                if ((rand() % 3 + 1) == 2)
                    multi = 2;
                cout<< "\n" << member_b[turn].nombre << " ataco a " << member_b[op2].nombre
                    << " Hp-" << member_b[turn].ataque * multi;
                if ((member_b[turn].ataque * multi) > member_b[op2].defensa)
                    member_b[op2].vida -= (member_b[turn].ataque * multi) - member_b[op2].defensa;
                break;
            case 2:
                cout<< "\n" << member_b[turn].nombre << " Ataco a " << member_b[op2].nombre
                    << " Hp-" << member_b[turn].ataque;
                if (member_b[turn].ataque > member_b[op2].defensa)
                    member_b[op2].vida -= member_b[turn].ataque - member_b[op2].defensa;
                break;
            case 3:
                cout<< "\n" << member_b[turn].nombre << " Ataco a"
                    << member_b[op2].nombre << " Hp-" << member_b[turn].ataque;
                member_b[op2].vida -= member_b[turn].ataque * .75;
                break;
        }
        if (member_b[op2].vida <= 0)
        {
            member_b[op2].vivo = false;
            member_b[op2].vida = 0;
            cout << "\n" << member_b[op2].nombre << ": muerto";
            if (member_b[op2].amigo == false)
                enemies--;
            else
                heros--;
        }
        getch();
    }
}
void gattacks(stats* member_b, int mem_num, int turn, int&enemies,int&heros){
    clear_screen();
    if (member_b[turn].vivo)
    {
        cout << "\n Turno de " << member_b[turn].nombre;
        string ops;
        string target;
        int op, op2, width = 30;
        bool op_inc = true;
        cout<< "\n--------------Ataques----------------\n"
            << 1 << "      	Ataque con espada" << endl
            << 2 << "      	Ataque con escudo" << endl
            << 3 << "      	Enojo" << endl;
        while (op_inc)
        {
            try
            {
                cin >> ops;
                if (!isValidInt(ops))
                    throw "Ingrese opcion valida";
                op = stoi(ops);
                if (op < 1 || op > 3)
                    throw 1;
                op_inc = false;
            }
            catch (const char* msg){
                cout << msg;
            }

            catch (const int nub){
                cout << "No sabes elegir?\n";
            }
        }
        clear_screen();
        cout << "\n Turno de " << member_b[turn].nombre;
        cout << "\n---------------Seleccion---------------\n";
        for (int i = 0; i < mem_num; i++)
        {
            cout<< i + 1 << ":" << member_b[i].nombre << setw(width - member_b[i].nombre.size())
                << "Vida: " << member_b[i].vida << "/" << member_b[i].mvida << endl;
        }
        op_inc = true;
        if (op == 3)
            op_inc = false;
        else
            op_inc = true;
        while (op_inc)
        {
            try
            {
                cin >> target;
                if (!isValidInt(target))
                    throw "Ingrese opcion valida";
                op2 = stoi(target);
                op2--;
                if (op2 < 0 || op2 > mem_num - 1)
                    throw 1;
                else if ((op2) == turn && (op == 1 || op == 2))
                    throw false;
                else if (member_b[op2].vivo == false)
                    throw 'D';
                op_inc = false;
            }
            catch (const char* msg){
                cout << msg;
            }

            catch (const int nub){
                cout << "opciones son: ";
                for (int i = 1; i <= mem_num; i++)
                    cout << i << " ";
            }

            catch (const bool nub){
                cout << "No te puedes atacar a ti mismo\n";
            }

            catch (const char deadmsg){
                cout << "Ese personaje esta muerto";
            }
        }
        switch (op)
        {
            case 1:
                cout<< "\n" << member_b[turn].nombre << " ataco a " << member_b[op2].nombre
                    << " Hp-" << member_b[turn].ataque;
                if (member_b[turn].ataque > member_b[op2].defensa)
                    member_b[op2].vida -= member_b[turn].ataque - member_b[op2].defensa;
                break;
            case 2:
                cout<< "\n" << member_b[turn].nombre << " ataco a " << member_b[op2].nombre
                    << " Hp-" << member_b[turn].ataque * .75 << " Def-";
                if (member_b[turn].ataque * .75 > member_b[op2].defensa)
                    member_b[op2].vida -= member_b[turn].ataque * .75 - member_b[op2].defensa;
                member_b[op2].defensa -= (member_b[turn].velocidad / 4);
                if (member_b[op2].defensa <= 0)
                {
                    member_b[op2].defensa = 0;
                }
                break;
            case 3:
                cout<< "\n" << member_b[turn].nombre << " se enojo"
                    << member_b[turn].nombre << " +att +defensa";

                member_b[turn].ataque += member_b[turn].ataque / 6;
                member_b[op2].defensa += (member_b[turn].mvida) / 6;
                break;
        }
        if (member_b[op2].vida <= 0)
        {
            member_b[op2].vivo = false;
            member_b[op2].vida = 0;
            cout << "\n" << member_b[op2].nombre << ": muerto";
            if (member_b[op2].amigo == false)
                enemies--;
            else
                heros--;
        }
        getch();
    }
}
void battacks(stats* member_b, int mem_num, int turn, int&enemies,int&heros){
    clear_screen();
    if (member_b[turn].vivo)
    {
        cout << "\n Turno de " << member_b[turn].nombre;
        string ops;
        string target;
        int op, op2, width = 30;
        bool op_inc = true;
        cout<< "\n--------------Ataques----------------\n"
            << 1 << "      	Aplastamiento banjo" << endl
            << 2 << "      	Cancion" << endl
            << 3 << "      	A través del fuego y las llamas" << endl;
        while (op_inc)
        {
            try
            {
                cin >> ops;
                if (!isValidInt(ops))
                    throw "Ingrese opcion valida";
                op = stoi(ops);
                if (op < 1 || op > 3)
                    throw 1;
                op_inc = false;
            }
            catch (const char* msg){
                cout << msg;
            }

            catch (const int nub){
                cout << "No sabes elegir?\n";
            }
        }
        clear_screen();
        cout << "\n Turno de " << member_b[turn].nombre;
        cout << "\n---------------Seleccion---------------\n";
        for (int i = 0; i < mem_num; i++)
        {
            cout<< i + 1 << ":" << member_b[i].nombre << setw(width - member_b[i].nombre.size())
                << "Vida: " << member_b[i].vida << "/" << member_b[i].mvida << endl;
        }
        op_inc = true;
        while (op_inc)
        {
            try
            {
                cin >> target;
                if (!isValidInt(target))
                    throw "Ingrese opcion valida";
                op2 = stoi(target);
                op2--;
                if (op2 < 0 || op2 > mem_num - 1)
                    throw 1;
                else if ((op2) == turn && (op == 1 || op == 2))
                    throw false;
                else if (member_b[op2].vivo == false)
                    throw 'D';
                op_inc = false;
            }
            catch (const char* msg){
                cout << msg;
            }

            catch (const int nub){
                cout << "opciones son: ";
                for (int i = 1; i <= mem_num; i++)
                    cout << i << " ";
            }

            catch (const bool nub){
                cout << "No te puedes atacar a ti mismo\n";
            }

            catch (const char deadmsg){
                cout << "Ese personaje esta muerto";
            }
        }
        switch (op)
        {
            case 1:
                cout<< "\n" << member_b[turn].nombre << " ataco a " << member_b[op2].nombre
                    << " Hp-" << member_b[turn].ataque;
                if (member_b[turn].ataque > member_b[op2].defensa)
                    member_b[op2].vida -= member_b[turn].ataque - member_b[op2].defensa;
                break;
            case 2:
                cout<< "\n" << member_b[turn].nombre << " esta inspirado\n"
                    << member_b[op2].nombre << " +At +Mg";
                member_b[op2].ataque += member_b[turn].magia / 2;
                member_b[op2].magia += member_b[turn].magia / 2;

                break;
            case 3:
                cout<< "\n" << member_b[op2].nombre << " Esta imbuido del poder del infierno\n"
                    << member_b[op2].nombre << " Stats+++";
                    member_b[op2].ataque += member_b[turn].magia / 2;
                    member_b[op2].defensa += member_b[turn].magia / 2;
                    member_b[op2].magia += member_b[turn].magia / 2;
                    member_b[turn].vida = 5;
                    break;
        }
        if (member_b[op2].vida <= 0)
        {
            member_b[op2].vivo = false;
            member_b[op2].vida = 0;
            cout << "\n" << member_b[op2].nombre << ": muerto";
            if (member_b[op2].amigo == false)
                enemies--;
            else
                heros--;
        }
        getch();
    }
}
void mattacks(stats* member_b, int mem_num, int turn, int&enemies,int&heros){
    clear_screen();
    if (member_b[turn].vivo)
    {
        cout << "\n Turno de " << member_b[turn].nombre;
        string ops;
        string target;
        int op, op2, op2_2, width = 30;
        bool op_inc = true;
        cout<< "\n--------------Ataques----------------\n"
            << 1 << "      	Supernova" << endl
            << 2 << "      	Relampago" << endl
            << 3 << "      	Acido" << endl;
        while (op_inc)
        {
            try
            {
                cin >> ops;
                if (!isValidInt(ops))
                    throw "Ingrese opcion valida";
                op = stoi(ops);
                if (op < 1 || op > 3)
                    throw 1;
                op_inc = false;
            }
            catch (const char* msg){
                cout << msg;
            }

            catch (const int nub){
                cout << "No sabes elegir?\n";
            }
        }
        clear_screen();
        cout << "\n Turno de " << member_b[turn].nombre;
        cout << "\n---------------Seleccion---------------\n";
        for (int i = 0; i < mem_num; i++)
        {
            cout<< i + 1 << ":" << member_b[i].nombre << setw(width - member_b[i].nombre.size())
                << "Vida: " << member_b[i].vida << "/" << member_b[i].mvida << endl;
        }
        if (op == 1)
            op_inc = false;
        else
            op_inc = true;
        while (op_inc)
        {
            try
            {
                cin >> target;
                if (!isValidInt(target))
                    throw "Ingrese opcion valida";
                op2 = stoi(target);
                op2--;
                if (op2 < 0 || op2 > mem_num - 1)
                    throw 1;
                else if ((op2) == turn && (op == 1 || op == 2))
                    throw false;
                else if (member_b[op2].vivo == false)
                    throw 'D';
                op_inc = false;
            }
            catch (const char* msg){
                cout << msg;
            }

            catch (const int nub){
                cout << "opciones son: ";
                for (int i = 1; i <= mem_num; i++)
                    cout << i << " ";
            }

            catch (const bool nub){
                cout << "No te puedes atacar a ti mismo\n";
            }

            catch (const char deadmsg){
                cout << "Ese personaje esta muerto";
            }
        }
        if (op == 1)
            op_inc = false;
        else
            op_inc = true;
        while (op_inc)
        {
            try
            {
                cin >> target;
                if (!isValidInt(target))
                    throw "Ingrese opcion valida";
                op2_2 = stoi(target);
                op2_2--;
                if (op2_2 < 0 || op2_2 > mem_num - 1)
                    throw 1;
                else if ((op2_2) == turn && (op == 3 || op == 2))
                    throw false;
                else if (member_b[op2_2].vivo == false)
                    throw 'D';
                op_inc = false;
            }
            catch (const char* msg){
                cout << msg;
            }
            catch (const int nub){
                cout << "opciones son: ";
                for (int i = 1; i <= mem_num; i++)
                    cout << i << " ";
            }

            catch (const bool nub){
                cout << "No te puedes atacar a ti mismo\n";
            }

            catch (const char deadmsg){
                cout << "Ese personaje esta muerto";
            }
        }
        switch (op)
        {
            case 1:
                cout << "\n" << member_b[turn].nombre << " SUPERNOVA\nTodos Hp-";
                for (int i = 0; i < mem_num; i++)
                {
                    if (member_b[i].vivo == false)
                        continue;
                    if (turn == i)
                        continue;
                    if ((member_b[turn].magia / 4) > member_b[i].defensa)
                        member_b[i].vida -= (member_b[turn].magia / 2) - member_b[i].defensa;
                }
                break;
            case 2:
                cout<< "\n" << member_b[turn].nombre << " ataco a " << member_b[op2].nombre
                    << " y " << member_b[op2_2].nombre << " Hp-" << member_b[turn].magia / 1.2;
                if ((member_b[turn].magia / 1.2) > member_b[op2].defensa)
                    member_b[op2].vida -= (member_b[turn].magia / 1.2) - member_b[op2].defensa;
                if ((member_b[turn].magia / 1.2) > member_b[op2_2].defensa)
                    member_b[op2_2].vida -= (member_b[turn].magia / 1.2) - member_b[op2_2].defensa;
                break;
            case 3:
                cout<< "\n" << member_b[turn].nombre << " uso Acido contra"
                    << member_b[op2].nombre << " y " << member_b[op2].nombre << " Def-";
                member_b[op2].defensa -= member_b[turn].magia / 2;
                if (member_b[op2].defensa <= 0)
                {
                    member_b[op2].defensa = 0;
                }
                if (member_b[op2_2].defensa <= 0)
                {
                    member_b[op2_2].defensa = 0;
                }
                break;
        }
        if (op == 1)
        {
            for (int i = 0; i < mem_num; i++)
            {
                if (member_b[i].vivo == false)
                    continue;
                if (member_b[i].vida <= 0)
                {
                    member_b[i].vivo = false;
                    member_b[i].vida = 0;
                    cout << "\n" << member_b[i].nombre << ": muerto";
                    if (member_b[i].amigo == false)
                        enemies--;
                    else
                        heros--;
                }
            }
        }
        else if (op == 2)
        {
            if (member_b[op2].vida <= 0)
            {
                member_b[op2].vivo = false;
                member_b[op2].vida = 0;
                cout << "\n" << member_b[op2].nombre << ": muerto";
                if (member_b[op2].amigo == false)
                    enemies--;
                else
                    heros--;
            }
            if (op == 2 && (member_b[op2_2].vida <= 0) && (op2_2 != op2))
            {
                member_b[op2_2].vivo = false;
                member_b[op2_2].vida = 0;
                cout << "\n" << member_b[op2_2].nombre << ": muerto";
                if (member_b[op2_2].amigo == false)
                    enemies--;
                else
                    heros--;
            }
        }
        getch();
    }
}
void eattacks(stats* member_b, int mem_num, int turn, int&enemies,int&heros){
    if (member_b[turn].vivo)
    {
        bool inc_selec = true;
        int op2 = 0, width = 30;
        srand(time(NULL));
        clear_screen();
        while (inc_selec)
        {
            op2 = rand() % mem_num + 1;
            op2--;
            if (op2 == turn)
                continue;
            if (member_b[op2].vivo == false)
                continue;
            if (member_b[op2].amigo == true)
                inc_selec = false;
        }
        if (member_b[turn].ataque > member_b[op2].defensa)
            member_b[op2].vida -= member_b[turn].ataque - member_b[op2].defensa;
        else
            member_b[op2].vida -= 5;
        cout << "\n" << member_b[turn].nombre << " ataco a " << member_b[op2].nombre << endl;
        if (member_b[op2].vida <= 0)
        {
            member_b[op2].vivo = false;
            member_b[op2].vida = 0;
            cout << "\n" << member_b[op2].nombre << ": muerto\n";
            if (member_b[op2].amigo == false)
                enemies--;
            else
                heros--;
        }
        for (int i = 0; i < mem_num; i++)
        {
            cout<< member_b[i].nombre << setw(width - member_b[i].nombre.size())
                << "Vida: " << member_b[i].vida << "/" << member_b[i].mvida << endl;
        }
        getch();
    }
}
void level_opening(){
    setlocale(LC_ALL, "");
    int i = 0;
    string n;
    cout << "   Después de una sangrienta pelea contra un dragón en el monte de la oscuridad " << endl;
    cout << "   Y tras naufragar junto con la tripulacion del barco mientras viajaban por el mar de Marloc" << endl;
    getch();
    clear_screen();
    cout << "  	Nuestro héroe por fin ha llegado a tierra" << endl;
    getch();
    clear_screen();
    cout << " 	Ahora dime aventurero, ¿cuál es tu nombre?\n\n	";
    cin >> Hero.nombre;
    assert(Hero.nombre != "Wong");
    assert(Hero.nombre != "wong");
    cout << "	Perfecto " << Hero.nombre << endl;
    getch();
    clear_screen();
    cout << " 	Espero que estés listo para tu próxima aventura" << endl;
    cout << " 	..." << endl;
    cout << " 	Porque muy posiblemente sera la ùltima" << endl;
    getch();
    clear_screen();
    cout << " 	Un pequeño flashback viene a la mente de " << Hero.nombre << endl;
    cout << endl;
    cout << " 	Se encuentra en el barco del que naufragó, cuando uno de sus compañeros,le susurró:" << endl;
    cout << endl;
    cout << "	'Nuestra vida depende de lo que encontremos en esta isla'" << endl;
    cout << endl;
    cout << " 	Después, todo se vuelve oscuro para nuestro heroe" << endl;
    getch();
    clear_screen();
    cout << " 	Tras caminar unos cuantos días, " << Hero.nombre << " se encuentra con 2 viejos conocidos" << endl;
    cout << endl;
    cout << " 	Los valientes aventureros,Karsus Y Aballister" << endl;
    getch();
    clear_screen();
    cout << "¡" << Hero.nombre << " cuánto tiempo!-exclamó Aballister-después del accidente,Karsus y yo hemos perdido nuestras habilidades" << endl;
    getch();
    cout << endl;
    cout << "Ayudanos a escoger cuáles quieres que desarrollemos Aballister y yo" << endl;
    cout << endl;
    getch();
    cout << "Recuerda que una vez escogidas no habrá marcha atrás" << endl;
    cout << endl;
    getch();
    clear_screen();
    cout << "Primero recuerdame, ¿que clase de aventurero eres tú?" << endl;
    cout << endl;
    clase(Hero, Aballister, Karsus);
    Sleep(1000);
    clear_screen();
    cout << "Perfecto, entonces encontremos lo que veniamos buscando" << endl;
    getch();
    clear_screen();
    cout << "Al caminar por varios minutos encuentran un templo antiguo" << endl;
    cout << endl;
    getch();
    cout << "En la entrada, se encuentra una ornamenta y al lado, un mensaje que dice lo siguiente: " << endl;
    cout << endl;
    getch();
    cout << "'No existe recompensa alguna, aquel que entre aquí, no lograra salir'" << endl;
    cout << endl;
    getch();
    cout << "'Bueno podríamos estar muertos'-dijo Karsus-" << endl;
    cout << endl;
    cout << endl;
    getch();
    cout << "INICIA LA AVENTURA" << endl;
    setlocale(LC_ALL, "C");
}
void clase(stats &Hero,stats & Aballister,stats & Karsus){
    cout << setw(15) << " Clase" << setw(15) << "Ataque" << setw(15) << "Defensa" << setw(15) << "Vida" << setw(15) << "Magia" << setw(15) << "Velocidad" << setw(8) << "Tecla" << endl;
    cout << setw(15) << " Gladiator" << setw(15) << "20" << setw(15) << "10" << setw(15) << "70" << setw(15) << "5" << setw(15) << "20" << setw(8) << "1" << endl;
    cout << setw(15) << " Rogue" << setw(15) << "15" << setw(15) << "5" << setw(15) << "60" << setw(15) << "5" << setw(15) << "50" << setw(8) << "2" << endl;
    cout << setw(15) << " Priest" << setw(15) << "10" << setw(15) << "10" << setw(15) << "55" << setw(15) << "15" << setw(15) << "40" << setw(8) << "3" << endl;
    cout << setw(15) << " Bard" << setw(15) << "10" << setw(15) << "10" << setw(15) << "50" << setw(15) << "20" << setw(15) << "35" << setw(8) << "4" << endl;
    cout << setw(15) << " Spellcaster" << setw(15) << "4" << setw(15) << "10" << setw(15) << "50" << setw(15) << "20" << setw(15) << "30" << setw(8) << "5" << endl;
    cout << endl;

    cout << "Nota: El ataque normal es de 10, mientras que para las demás estadisticas el valor normal es de 50" << endl;

    cout << "Introduzca una clase" << endl;
    int s = 0;
    static bool sele = true;
    while (sele)
    {
        cin >> Hero.seleccion;
        sele = !isValidInt(Hero.seleccion);
        if (!sele)
        {
            s = stoi(Hero.seleccion);
            if (s < 0 || s > 5)
                sele = true;
            }
    }

    cout << endl;
    seleccionClase(Hero);
    cout << endl;
    cout << "Introduzca la clase que deseas para Aballister" << endl;
    sele = true;

    while (sele)
    {
        cin >> Aballister.seleccion;
        while (Hero.seleccion == Aballister.seleccion)
        {
            cout << "Introduzca una clase que no haya sido escogida" << endl;
            cin >> Aballister.seleccion;
        }
        sele = !isValidInt(Aballister.seleccion);
        if (!sele)
        {
            s = stoi(Aballister.seleccion);
            if (s < 0 || s > 5)
            sele = true;
        }
    }
    cout << endl;
    seleccionClase(Aballister);
    cout << endl;

    sele = true;

    cout << "Ahora introduzca una clase para Karsus" << endl;
    while (sele)
    {
        cin >> Karsus.seleccion;
        while (Karsus.seleccion == Aballister.seleccion || Karsus.seleccion == Hero.seleccion)
        {
            cout << "Introduzca una clase que no haya sido escogido" << endl;
            cin >> Karsus.seleccion;
        }
        sele = !isValidInt(Karsus.seleccion);
        if (!sele)
        {
            s = stoi(Karsus.seleccion);
            if (s < 0 || s > 5)
                sele = true;
        }
    }
    cout << endl;
    seleccionClase(Karsus);
    cout << endl;
}
void seleccionClase(stats&Hero){
    int op = stoi(Hero.seleccion);
    switch (op)
    {
        case 1:
            cout << "Se ha escogido la clase Gladiator" << endl;
            Hero.ataque = 20;
            Hero.defensa = 15;
            Hero.vida = 65;
            Hero.magia = 5;
            Hero.velocidad = 20;
            Hero.attack = gattacks;
            break;
        case 2:
            cout << "Se ha escogido la clase Rogue" << endl;
            Hero.ataque = 15;
            Hero.defensa = 5;
            Hero.vida = 55;
            Hero.magia = 5;
            Hero.velocidad = 50;
            Hero.attack = rattacks;
            break;
        case 3:
            cout << "Se ha escogido la clase Priest" << endl;
            Hero.ataque = 10;
            Hero.defensa = 10;
            Hero.vida = 55;
            Hero.magia = 15;
            Hero.velocidad = 40;
            Hero.attack = pattacks;
            break;
        case 4:
            cout << "Se ha escogido la clase Bard" << endl;
            Hero.ataque = 10;
            Hero.defensa = 10;
            Hero.vida = 50;
            Hero.magia = 20;
            Hero.velocidad = 35;
            Hero.attack = battacks;
            break;
        case 5:
            cout << "Se ha escogido la clase Spellcaster" << endl;
            Hero.ataque = 4;
            Hero.defensa = 5;
            Hero.vida = 50;
            Hero.magia = 20;
            Hero.velocidad = 30;
            Hero.attack = mattacks;
            break;
        default:
            cout << "Escoge un numero valido" << endl;
    }
}
int player_sorter(stats a, stats b){
    if (a.velocidad < b.velocidad)
        return 1;
    else
        return 0;
}
void eventroom()
{
 for(int i=0;i<3;i++)
    {
        for(int j=0;j<3;j++)
        {
            mapaVisible[player.x-1+j][player.y-1+i]=mapas[piso][player.x-1+j][player.y-1+i];
        }
    }
    if(mapas[piso][player.x][player.y]==itemmmm)
        rings();
    else if(mapas[piso][player.x][player.y]>=48 && mapas[piso][player.x][player.y]<=57)
    {
        switch(mapas[piso][player.x][player.y])
        {
            case '0':
                //PRIMER DIALOGO
                cout<<"A lo largo de estas dungeons, encontraras varios enemigos, items especiales, y notas que te contaran parte de la historia";
                Sleep(5000);
                break;
            case '1':
                 //SEGUNDO DIALOGO
                cout<<"No te dejes engañar por los varios caminos que encontras"
                    << " recuerda la importante recompensa que se encuentra al final de esta inmensa cueva"<<endl;
                Sleep(6000);
                break;
            case '2':
                //TERCER DIALOGO
                cout<<"A continuacion te encontraras con unos enemigo"
                    <<" Debes seleccionar el ataque y a quien deseas atacar"<<endl;
                Sleep(5500);
                break;
            case '3':
                //PRIMER MENSAJE, SEGUNDO NIVEL
                cout<<"Varios lo han intentado, pero ninguno lo ha conseguido"<<endl;
                Sleep(3000);
                cout<<" Todos vienen por el mismo artefacto, pero los guardianes se los han impedido"<<endl;
                Sleep(3000);
                break;
            case '4':
                //ANTES DEL PRIMER ENEMIGO DEL TERCER NIVEL
                cout<<"Aballister: 'A partir de ahora nuestros enemigos seran mas fuertes'"<<endl;
                Sleep(4000);
                cout<<"Karsus:'¿Tu como lo sabes?"<<endl;
                Sleep(3000);
                cout<<"Aballister: 'Me contaron por ahi...unos conocidos"<<endl;
                Sleep(3000);
                break;
            case '5':
                 //FINAL DEL PRIMER PASILLO QUE NO ES
                cout<<"Felicidades por su perseverancia, pero me temo que han tomado el camino equivocado"<<endl;
                cout<<"Como todos los que vinieron antes que ustedes"<<endl;
                Sleep(7000);
                break;
            case '6':
                //AL FINAL DEL PASILLO
                cout<<"Que ironia, parece ser que estan siguiendo los mismos pasos que aquellos que estan muertos"<<endl;
                cout<<"Y parece, que alguien los esta guiando"<<endl;
                Sleep(7000);
                break;
            case '7':
                //MENSAJE 1 DEL NIVEL 4, RUBEN DICE DONDE SE PONE
                cout<<"Puede que se esten volviendo locos, o que alguien, los quiere ver morir"<<endl;
                Sleep(4000);
                break;
            case '8':
                 //MENSAJE 2 DEL NIVEL 4
                cout<<"¿Realmente valdra la pena sacrificarlo todo, por obtener riqueza infinita?"<<endl;
                Sleep(4000);
                break;
            case '9':
                //MENSAJE 3 DEL NIVEL 4
                cout<<Hero.nombre<<" encuentra una carta que dice lo siguiente: "<<endl;
                Sleep(3000);
                cout<<"'Corre, alguien esta a punto de tra...'"<<endl;
                Sleep(3000);
                cout<<"Aballister toma la carta y la rompe y dice 'Hay que dejar de leer esas tonterias, solo nos hacen daño"<<endl;
                Sleep(3000);
                cout<<"Karsus : 'Creo que es mejor seguir, aunque yo mantendria mis ojos abiertos"<<endl;
                Sleep(3000);
                break;
        }
    }
    else if(mapas[piso][player.x][player.y]==enemigo)
        {
            if(battle())
                cout<<"Has ganado el combate, continua con tu aventura!"<<endl;
            else
            {
                clear_screen();
                cout<<"YOU DIED"<<endl;
                Sleep(1000);
                getch;
                exit(1);
            }

        }
    else if(mapas[piso][player.x][player.y]==bosssss)
        {
            for(int i=0;i<30;i++)
            {
                for(int j=0;j<30;j++)
                {
                    mapaVisible[i][j]=niebla;
                }
            }
            firstIteration=1;
            piso++;
            switch(piso)
            {
                case 1:
                    player.x=1;
                    player.y=18;
                    break;
                case 2:
                    player.x=8;
                    player.y=1;
                    break;
                case 3:
                    player.x=1;
                    player.y=28;
                    break;
            }
        }
}
